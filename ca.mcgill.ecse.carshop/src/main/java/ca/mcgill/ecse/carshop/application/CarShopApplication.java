/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package ca.mcgill.ecse.carshop.application;
import java.sql.Time;
import java.time.LocalDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.sql.Date;
import java.util.List;

import ca.mcgill.ecse.carshop.controller.CarShopController;
import ca.mcgill.ecse.carshop.controller.InvalidInputException;
import ca.mcgill.ecse.carshop.controller.InvalidUserException;
import ca.mcgill.ecse.carshop.model.CarShop;
import ca.mcgill.ecse.carshop.model.Customer;
import ca.mcgill.ecse.carshop.model.Garage;
import ca.mcgill.ecse.carshop.model.Technician.TechnicianType;
import ca.mcgill.ecse.carshop.model.Appointment;
import ca.mcgill.ecse.carshop.model.Business;
import ca.mcgill.ecse.carshop.model.BusinessHour.DayOfWeek;
import ca.mcgill.ecse.carshop.persistence.CarShopPersistence;
import ca.mcgill.ecse.carshop.view.LogInPage;

public class CarShopApplication {
	
	private static CarShop carShop;
	//This variable has been added to make sure the cucumber test do not load the persistence layer.
	//Not to be modified. Program will work as intended with View and Testing 
	private static boolean TESTING = false;

    public static void main(String[] args) {
        //Testing from the owner point of view.
    	CarShop carShop = CarShopApplication.getCarShop();
//    	
    	try {
			//Set up business
    		
    		if(carShop.getBusiness() == null) {
    			Business business = new Business("", "", "", "", carShop);
    		}
			if(carShop.getBusiness().getBusinessHours().size() == 0) { 
				//Log In the owner to see the modify the business.
				//This is added because we do not have to implement the update business hours hence they are set from scratch to a single value for testing.
				CarShopController.logIn("owner", "password");
				CarShopController.addBusinessHour(DayOfWeek.Monday, new Time(9, 0, 0), new Time(17, 0, 0));
				CarShopController.addBusinessHour(DayOfWeek.Tuesday, new Time(10, 0, 0), new Time(17, 0, 0));
				CarShopController.addBusinessHour(DayOfWeek.Wednesday, new Time(9, 0, 0), new Time(17, 0, 0));
				CarShopController.addBusinessHour(DayOfWeek.Thursday, new Time(10, 0, 0), new Time(17, 0, 0));
				CarShopController.addBusinessHour(DayOfWeek.Friday, new Time(9, 0, 0), new Time(15, 0, 0));
			
				//Vacation and Holiday slots are added also for testing purposes.
				CarShopController.addNewTimeSlot("holiday", new Date(2021, 3, 10), new Time(10, 0, 0), new Date(2021, 3, 14), new Time(23, 59, 0));
				CarShopController.addNewTimeSlot("vacation", new Date(2021, 03, 28), new Time(9, 0, 0), new Date(2021, 03, 29), new Time(23, 59, 0));
			}
			
			CarShopController.logOut();
			
			LocalDateTime now = LocalDateTime.now();
			Time t = new Time(now.getHour(), now.getMinute(), now.getSecond());
			Date d = new Date(now.getYear() - 1900, now.getMonthValue() - 1, now.getDayOfMonth());
			
			CarShopController.setTime(t);
			CarShopController.setToday(d);
			
			
		} catch (InvalidInputException e) {
			System.out.println(e.getMessage());
		} catch (InvalidUserException e) {
			System.out.println(e.getMessage());
		}
    	
    	// start UI
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new LogInPage().setVisible(true);
            }
        });
	}
    
    public static CarShop getCarShop() {
    	if(carShop == null) {
    		TESTING = false;
    		carShop = CarShopPersistence.load();    	
    	}	
    	return carShop;
    }
    
    public static CarShop resetForTesting() {
    	if(carShop == null) {
    		carShop = new CarShop();
    	}
    	TESTING = true;
    	
    	return carShop;
    }
    
    public static boolean getTesting() {
    	return TESTING;
    }
    
    public static Garage getGarageForTechnician(TechnicianType type) {
    	for(Garage g: carShop.getGarages()) {
    		if(g.getTechnician().getType() == type) {
    			return g;
    		}
    	}
    	
    	return null;
    }
    
    public static Customer getCustomerWithUsername(String username) {
    	for(Customer c: carShop.getCustomers()) {
    		if(c.getUsername().equals(username)) {
    			return c;
    		}
    	}
    	return null;
    }
}
    