namespace ca.mcgill.ecse.carshop.model;

use carshopPersistence.ump;
use carshopStates.ump;

class CarShop  {
  1 <@>- 0..1 Business business;
  1 <@>- 0..1 Owner owner;
  1 <@>- * Customer customers;
  1 <@>- 0..5 Technician technicians;
  1 <@>- 0..5 Garage garages;
  1 <@>- * BusinessHour hours;
  1 <@>- * Appointment appointments;
  1 <@>- * TimeSlot timeSlots;
  1 <@>- * BookableService bookableServices;

   public void reinitialize(){
		List<BookableService> bookables = this.getBookableServices();
		List<User> users = new ArrayList<>();
		users.addAll(this.getCustomers());
		users.addAll(this.getTechnicians());
		if(this.getOwner() != null) {
			users.add(this.getOwner());
		}


	  User.reinitializeUsernamesList(users);
	  BookableService.reinitializeNameList(bookables);
  }
}

class User {
  abstract;
  unique username;
  password;

  public static void reinitializeUsernamesList(List<User> users) {
	  for(User user: users) {
		  usersByUsername.put(user.getUsername(), user);
	  }
  }
}

class Owner {
  isA User;


  before constructor, setUsername {
  	if(!aUsername.equals("owner")) {
  		throw new RuntimeException("Owner account must have 'owner' username");
  	}
  }
}

class Customer {

  isA User;
  Integer noShow;
  public void incrNoShow(){
  	this.noShow+=1;
  }
}

class Technician {
  enum TechnicianType {
    Tire, Engine, Transmission, Electronics, Fluids
  }
  1 -- 0..1 Garage garage;
  TechnicianType type;
  isA User;
}

class Business {
  name;
  address;
  phoneNumber;
  email;
    // since there is only one business in this system, the first
  // 0..1 should be a 1. since this is a directed association, the
  // first multiplicity is not taken into account. hence, it is
  // changed to 0..1 to avoid Umple issuing warning W036
  // Unmanaged Multiplicity
  0..1 -> * BusinessHour businessHours;
  0..1 -> * TimeSlot holidays;
  0..1 -> * TimeSlot vacations;
  // association to Owner is not modeled because there is
  // only one owner and only one business in the system
}

class BusinessHour {
  enum DayOfWeek { Monday, Tuesday, Wednesday, Thursday, Friday, Saturday, Sunday }
  DayOfWeek dayOfWeek;
  Time startTime;
  Time endTime;
}

class TimeSlot {
  Date startDate;
  Time startTime;
  Date endDate;
  Time endTime;
}

class Garage {
  0..1 -> * BusinessHour businessHours;
  1 -- * Service services;
}

class BookableService {
  abstract;
  unique name;

  public static void reinitializeNameList(List<BookableService> bookableServices) {
	  for(BookableService bookable: bookableServices) {
		  bookableservicesByName.put(bookable.getName(), bookable);
	  }
  }
}

class Service {
  isA BookableService;
  int duration;

  before constructor, setDuration {
  	if(aDuration <= 0) {
  	  throw new RuntimeException("Duration must be positive");
  	}
  }
}

class ServiceCombo {
  isA BookableService;
  * -> 0..1 ComboItem mainService;
  // the services should be {ordered}; however, since Umple translates every * association
  // or composition into a list, it is possible to order items in that list given Umple's API
  1 <@>- 2..* ComboItem services;
}

class ComboItem {
  boolean mandatory;
  * -> 1 Service service;
}


class Appointment {
  depend java.sql.Time;
  depend java.sql.Date;
  * -- 1 Customer customer;
  * -- 1 BookableService bookableService;
  1 <@>- * ServiceBooking serviceBookings;
}

class ServiceBooking {
  * -- 1 Service service;
  0..1 -> 1 TimeSlot timeSlot;
}
